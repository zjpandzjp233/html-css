@media (prefers-reduced-motion: no-preference) {
  * {
    scroll-behavior: smooth;
  }
}

body {
  background: #f5f6f7;
  color: #1b1b32;
  font-family: Helvetica;
  margin: 0;
}

header {
  width: 100%;
  height: 50px;
  background-color: #1b1b32;
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: fixed;
  top: 0;
}

#logo {
  width: max(10rem, 18vw);
  background-color: #0a0a23;
  aspect-ratio: 35 / 4;
  padding: 0.4rem;
}

h1 {
  color: #f1be32;
  font-size: min(5vw, 1.2em);
  text-align: center;
}

nav {
  width: 50%;
  max-width: 300px;
  height: 50px;
}

nav > ul {
  display: flex;
  justify-content: space-evenly;
  flex-wrap: wrap;
  align-items: center;
  padding-inline-start: 0;
  margin-block: 0;
  height: 100%;
}

nav > ul > li {
  color: #dfdfe2;
  margin: 0 0.2rem;
  padding: 0.2rem;
  display: block;
}

nav > ul > li:hover {
  background-color: #dfdfe2;
  color: #1b1b32;
  cursor: pointer;
}

li > a {
  color: inherit;
  text-decoration: none;
}

main {
  padding-top: 50px;
}

section {
  width: 80%;
  margin: 0 auto 10px auto;
  max-width: 600px;
}

h1,
h2 {
  font-family: Verdana, Tahoma;
}

h2 {
  border-bottom: 4px solid #dfdfe2;
  margin-top: 0px;
  padding-top: 60px;
}

.info {
  padding: 10px 0 0 5px;
}

.formrow {
  margin-top: 30px;
  padding: 0px 15px;
}

input {
  font-size: 16px;
}

.info label, .info input {
  display: inline-block;
}

.info input {
  width: 50%;
  text-align: left;
}

.info label {
  width: 10%;
  min-width: 55px;
  text-align: right;
}

.question-block {
  text-align: left;
  display: block;
  width: 100%;
  margin-top: 20px;
  padding-top: 5px;
}

h3 {
  margin-top: 5px;
  padding-left: 15px;
  font-size: 20px;
}

h3::before {
  content: "Question #";
}

.question {
  border: none;
  padding-bottom: 0;
}

.answers-list {
  list-style: none;
  padding: 0;
}

button {
  display: block;
  margin: 40px auto;
  width: 40%;
  padding: 15px;
  font-size: 23px;
  background: #d0d0d5;
  border: 3px solid #3b3b4f;
}

footer {
  background-color: #2a2a40;
  display: flex;
  justify-content: center;
}

footer,
footer a {
  color: #dfdfe2;
}

address {
  text-align: center;
  padding: 0.3em;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}






/*
SVG（可缩放矢量图形）的一个有用之处是它包含一个 path 属性，该属性允许在不影响图像分辨率的情况下缩放图像。 

img {
width: max(250px, 25vw);
}
在以上示例中，如果视口宽度小于 1000 像素，图像的宽度将为 250px。 如果视口宽度大于 1000 像素，图像宽度将为 25vw。 这是因为 25vw 相当于视口宽度的 25%。

nav>ul：这是一个子组合器（>），用于选择nav元素的直接子元素ul。这意味着只有当ul是nav的直接子元素时，下面的样式才会应用到它。
nav>ul
{
  display:flex;
  justify-content: space-evenly;
}

clip: rect(0, 0, 0, 0);
clip 属性用于定义元素的可见区域。如果元素的某个部分位于这个区域之外，它将被裁剪掉，不可见。
rect(0, 0, 0, 0) 是一个矩形函数，它接受四个参数，分别代表矩形的上、右、下、左边界。这里的四个参数都是0，意味着矩形的边界完全重合于一个点（即没有实际的矩形区域）。
因此，clip: rect(0, 0, 0, 0); 会导致元素的整个内容都不可见，因为没有任何区域被定义为可见的。
white-space: nowrap;
white-space 属性控制元素内的空白字符的处理方式，以及如何处理换行。
nowrap 是 white-space 属性的一个值，表示文本不会换行。即使在文本过长超出元素宽度的情况下，它也会在一行内显示，而不是自动换行到下一行。
这通常用于确保文本在一行内显示，例如在标题或者某些标签中，以避免文本的断行影响布局。
position: absolute;：设置元素的定位方式为绝对定位。这意味着元素会相对于其最近的已定位（非static）祖先元素进行定位。如果没有这样的祖先元素，则相对于文档的<html>元素。
overflow: hidden;：设置元素的溢出行为为隐藏。这意味着如果元素的内容超出了其指定的宽度和高度，超出的部分将不会显示。

通过设置 cursor:pointer;，可以确保即使在非链接元素上，鼠标悬停时也显示为手形图标，这通常用于提高用户界面的交互性和直观性。

position: fixed; 这个属性用于将元素（在这个上下文中是header）固定在视口（viewport，即浏览器窗口）的某个位置，
即使页面滚动，这个元素也会保持在相同的位置。这通常用于创建固定在页面顶部的导航栏或工具栏。

在这段代码中，display:inline-block; 是一个CSS属性，用于设置元素的显示方式。具体来说，它将元素设置为内联块级元素（inline-block）。
这意味着元素会像内联元素（如<span>或<a>）一样在行内显示，但同时又能像块级元素（如<div>）一样拥有宽度和高度属性。
在这段代码中，display:inline-block; 被应用于 .info 类中的 input 和 label 元素。

在CSS（层叠样式表）中，display: block; 是一个用于控制元素显示方式的属性。当设置为 block 时，该属性会使得元素以块级元素的形式显示。这意味着元素会独占一行，
其宽度默认会扩展到父元素的宽度，除非有其他样式影响。此外，块级元素可以设置宽度（width）、高度（height）、外边距（margin）和内边距（padding）等属性。

在开发过程中查看 fieldset 元素周围的默认边框很有用。 但是，它可能不是你想要的样式。
移除 .question 元素的边框和底部填充。
.question
{
  border:none;
  padding-bottom:0;
}

虽然 ul/li 元素贴心地为列表项提供了项目符号，但是你的单选按钮不需要它们。 
你可以使用 list-style 属性来控制项目符号的样式。 例如，你可以使用以下代码将项目符号变成圆圈：
示例代码
ul {
  list-style: circle;
}

.answers-list{
list-style: none;
}

举个例子，假设你有以下HTML代码：
<h3>What is the capital of France?</h3>
<h3>What is the largest ocean in the world?</h3>
应用上述CSS代码后，效果将变为：
Question #1: What is the capital of France?
Question #2: What is the largest ocean in the world?
h3::before
{
  content:"Question #";
}

padding-inline-start: 0;：
这个属性用于设置元素内边距的开始位置。inline-start是一个新的CSS属性，它根据元素的书写模式（如从左到右或从右到左）自动调整。这里设置为0，意味着元素的开始边不会有内边距。
margin-block: 0;：
这个属性用于设置元素的块级边距（即垂直边距）。block表示垂直方向，这里设置为0，意味着元素的顶部和底部不会有外边距。

单击导航链接应将视口跳转到相关部分。 然而，这种跳转可能会让一些用户感到迷惑。
选择所有元素，并将 scroll-behavior 设置为 smooth。

某些类型的基于运动的动画可能会给一些用户带来不适。 特别是，患有前庭功能障碍的人对某些运动触发器敏感。
@media at-rule 有一个名为 prefers-reduced-motion 的媒体功能，可以根据用户的偏好设置 CSS。 它可以使用以下几个值之一：
reduce
no-preference
示例代码
@media (feature: value) {
  selector {
    styles
  }
}
@media (prefers-reduced-motion: no-preference) {
  * {
    scroll-behavior: smooth;
  }
}
这段代码是CSS的一部分，用于响应用户的偏好设置，特别是那些对动画敏感的用户。代码的解释如下：
@media (prefers-reduced-motion: no-preference) { ... }：这是一个CSS媒体查询，
用于检测用户的偏好设置。prefers-reduced-motion是一个媒体特性，用于检测用户是否希望减少动画效果。这里的值no-preference表示用户没有特别偏好，即可以接受默认的动画效果。
* { scroll-behavior: smooth; }：这是CSS规则，应用于所有元素（由*选择器指定）。
scroll-behavior: smooth;是一个CSS属性，用于指定滚动行为。当设置为smooth时，滚动动作会平滑进行，而不是瞬间跳转。
综合来看，这段代码的作用是：如果用户的偏好设置为no-preference（即没有特别偏好），
则所有元素的滚动行为将被设置为平滑滚动，如果设置的是reduce则是瞬间跳转。这样，对于没有特别需求的用户，页面的滚动效果会更加流畅和自然。
 */